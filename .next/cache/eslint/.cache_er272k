[{"/home/pavanr/Development/tvks/zkid-next-framework/app/MuiContent.tsx":"1","/home/pavanr/Development/tvks/zkid-next-framework/app/Providers.tsx":"2","/home/pavanr/Development/tvks/zkid-next-framework/app/Pwa.tsx":"3","/home/pavanr/Development/tvks/zkid-next-framework/app/ThemeButton.tsx":"4","/home/pavanr/Development/tvks/zkid-next-framework/app/api/users/route.ts":"5","/home/pavanr/Development/tvks/zkid-next-framework/app/dashboard/layout.tsx":"6","/home/pavanr/Development/tvks/zkid-next-framework/app/dashboard/page.tsx":"7","/home/pavanr/Development/tvks/zkid-next-framework/app/error.tsx":"8","/home/pavanr/Development/tvks/zkid-next-framework/app/layout.tsx":"9","/home/pavanr/Development/tvks/zkid-next-framework/app/page.tsx":"10","/home/pavanr/Development/tvks/zkid-next-framework/app/register/layout.tsx":"11","/home/pavanr/Development/tvks/zkid-next-framework/app/register/page.tsx":"12","/home/pavanr/Development/tvks/zkid-next-framework/app/theme.ts":"13","/home/pavanr/Development/tvks/zkid-next-framework/components/AlertMessageDialog.tsx":"14","/home/pavanr/Development/tvks/zkid-next-framework/components/Loading.tsx":"15","/home/pavanr/Development/tvks/zkid-next-framework/components/NavigationBar/navigationBar.tsx":"16","/home/pavanr/Development/tvks/zkid-next-framework/components/UserDigitalCard.tsx":"17","/home/pavanr/Development/tvks/zkid-next-framework/components/appLogo.tsx":"18","/home/pavanr/Development/tvks/zkid-next-framework/components/pageTitle.tsx":"19","/home/pavanr/Development/tvks/zkid-next-framework/lib/models/user.model.ts":"20","/home/pavanr/Development/tvks/zkid-next-framework/lib/mongodb.ts":"21","/home/pavanr/Development/tvks/zkid-next-framework/lib/utils.ts":"22"},{"size":1896,"mtime":1699018061694,"results":"23","hashOfConfig":"24"},{"size":2431,"mtime":1699010359660,"results":"25","hashOfConfig":"24"},{"size":644,"mtime":1699010359660,"results":"26","hashOfConfig":"24"},{"size":591,"mtime":1699010359660,"results":"27","hashOfConfig":"24"},{"size":2304,"mtime":1699041500890,"results":"28","hashOfConfig":"24"},{"size":1418,"mtime":1699041500890,"results":"29","hashOfConfig":"24"},{"size":1611,"mtime":1699044930649,"results":"30","hashOfConfig":"24"},{"size":580,"mtime":1699010359664,"results":"31","hashOfConfig":"24"},{"size":1485,"mtime":1699041898047,"results":"32","hashOfConfig":"24"},{"size":574,"mtime":1699042658234,"results":"33","hashOfConfig":"24"},{"size":1060,"mtime":1699018061698,"results":"34","hashOfConfig":"24"},{"size":6331,"mtime":1699041622173,"results":"35","hashOfConfig":"24"},{"size":375,"mtime":1699010359664,"results":"36","hashOfConfig":"24"},{"size":2634,"mtime":1699018061698,"results":"37","hashOfConfig":"24"},{"size":973,"mtime":1699010623565,"results":"38","hashOfConfig":"24"},{"size":9397,"mtime":1699041872748,"results":"39","hashOfConfig":"24"},{"size":2819,"mtime":1699041500890,"results":"40","hashOfConfig":"24"},{"size":4013,"mtime":1699010920728,"results":"41","hashOfConfig":"24"},{"size":265,"mtime":1699018061698,"results":"42","hashOfConfig":"24"},{"size":1057,"mtime":1699041500890,"results":"43","hashOfConfig":"24"},{"size":1426,"mtime":1699011215844,"results":"44","hashOfConfig":"24"},{"size":383,"mtime":1699021450302,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1asmoff",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pavanr/Development/tvks/zkid-next-framework/app/MuiContent.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/Providers.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/Pwa.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/ThemeButton.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/api/users/route.ts",["116","117","118"],[],"// In this file, we can define any type of request as follows:\n// export async function GET(Request) {}\n// export async function HEAD(Request) {}\n// export async function POST(Request) {}\n// export async function PUT(Request) {}\n// export async function DELETE(Request) {}\n\nimport { NextRequest, NextResponse } from \"next/server\"; // Import Next.js server functions for handling requests and responses\nimport mongoose from \"mongoose\"; // Import Mongoose library for MongoDB database interaction\nimport { Sort } from \"mongodb\"; // Import MongoDB Sort interface for sorting query results\nimport { dbConnect } from \"@/lib/mongodb\"; // Import custom function for connecting to MongoDB\nimport { ColumnSort, ColumnFilter } from \"@tanstack/table-core\"; // Import interfaces for column sorting and filtering\nimport { User, UserInterface } from \"@/lib/models/user.model\";\n\nexport const dynamic = \"force-dynamic\"; // to supress Error processing API request: DynamicServerError: Dynamic server usage: nextUrl.searchParams\n\n// Define the type for the filter object\nexport type filter = {\n  id: string;\n  value: string;\n};\n\n// Handler function for users GET requests\n// Return the JSON response with the data and pagination details\nexport async function GET(req: NextRequest, context: any) {\n  try {\n    // Establishing a connection to the database\n    await dbConnect();\n    const users: UserInterface[] = [];\n    const _users = await User.find({});\n    _users.forEach((user: any) => {\n      console.log(\"user\", user);\n      users.push(user.forJSON());\n    });\n    // Return the JSON response\n    return NextResponse.json({ users }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error processing API request:\", error);\n    // Return an error response if any exception occurs\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\n  }\n}\nexport async function POST(req: NextRequest, context: any) {\n  try {\n    await dbConnect();\n    const body = await req.json();\n    console.log(\"body\", body);\n    const user = await User.create(body);\n    return NextResponse.json({ user: user.forJSON() }, { status: 201 });\n  } catch (error) {\n    console.error(\"Error processing API request:\", error);\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\n  }\n}\n","/home/pavanr/Development/tvks/zkid-next-framework/app/dashboard/layout.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/dashboard/page.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/error.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/layout.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/page.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/register/layout.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/app/register/page.tsx",["119","120","121"],[],"\"use client\";\n\nimport * as yup from \"yup\"; // Yup library for form validation\nimport { yupResolver } from \"@hookform/resolvers/yup\"; // Resolver for Yup validation with React Hook Form\nimport { Controller, useForm } from \"react-hook-form\"; // Form management library\nimport LoadingSpinner from \"@/components/Loading\";\nimport { Typography, TextField, Button } from \"@mui/material\";\nimport Link from \"next/link\";\nimport { MuiTelInput, matchIsValidTel } from \"mui-tel-input\";\nimport { useState } from \"react\";\n\nexport default function Dashboard(): JSX.Element {\n  const [loadingMessage, setLoadingMessage] = useState<string>(\"\");\n\n  const registerForm = {\n    name: yup.string().required(\"Full name is required\"),\n    email: yup.string().required(\"Email is required\").email(\"Invalid email format\"),\n    phone: yup.string().required(\"A Mobile number is required\"),\n    role: yup.string().required(\"Role is required\"),\n    description: yup.string().required(\"Description is required\"),\n    extra: yup.string(),\n    photo: yup.mixed().required(\"Required\"),\n  };\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors, touchedFields },\n    reset, // Add the reset function from react-hook-form\n  } = useForm({\n    resolver: yupResolver(yup.object().shape(registerForm)),\n  });\n  // Form submission handler\n  async function onSubmit(data: any) {\n    setLoadingMessage(\"Registering...\");\n    // Check if a photo file is selected\n    if (data.photo[0]) {\n      const photoFile = data.photo[0];\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        if (e.target) {\n          const base64Data = e.target.result as string;\n\n          // Create a new object by cloning the 'data' object and modifying the 'photo' property\n          const modifiedData = { ...data, photo: base64Data };\n\n          // Send the modified data to the server\n          sendRegistrationData(modifiedData);\n        }\n      };\n\n      // Read the photo file as a base64 string\n      reader.readAsDataURL(photoFile);\n    }\n  }\n\n  async function sendRegistrationData(data: any) {\n    console.log(\"data\", data);\n    const response = await fetch(\"/api/users\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const json = await response.json();\n    console.log(\"json\", json);\n    if (!response.ok) {\n      console.error(\"error\", json);\n      alert(\"Error: Could not register user\");\n    } else {\n      alert(\"User registered successfully\");\n      // reset form\n      reset();\n    }\n\n    setLoadingMessage(\"\");\n  }\n  return (\n    <>\n      {/* Registration form */}\n      <Typography component=\"h1\" variant=\"h5\" sx={{ marginBottom: 2 }}>\n        Registration\n      </Typography>\n      <form onSubmit={handleSubmit(onSubmit)} encType=\"multipart/form-data\">\n        {/* Full Name field */}\n        <TextField\n          id=\"name\"\n          type=\"text\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label=\"Full Name (Firstname and Lastname)\"\n          fullWidth\n          {...register(\"name\")}\n          error={touchedFields.name && Boolean(errors.name)}\n          helperText={touchedFields.name ? errors.name?.message : \"\"}\n          sx={{ mb: 2 }}\n        />\n        {/* Email field */}\n        <TextField\n          type=\"email\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label=\"Email\"\n          {...register(\"email\")}\n          error={touchedFields.email && Boolean(errors.email)}\n          helperText={touchedFields.email ? errors.email?.message : \"\"}\n          fullWidth\n          sx={{ mb: 2 }}\n        />\n        {/* Phone field */}\n        <Controller\n          name=\"phone\"\n          control={control}\n          rules={{\n            validate: (value) => {\n              console.log(\"value\", value);\n              return matchIsValidTel(value) || \"Invalid mobile number\";\n            },\n          }}\n          render={({ field: { ref, ...field } }) => (\n            <MuiTelInput\n              disableDropdown\n              inputRef={ref}\n              inputProps={{ readOnly: false }}\n              {...field}\n              color=\"primary\"\n              defaultCountry=\"US\"\n              variant=\"outlined\"\n              // onlyCountries={[\"US\", \"IN\"]}\n              // onlyCountries={[\"IN\"]}\n              label=\"Mobile Number\"\n              error={!!errors.phone}\n              helperText={errors.phone?.message}\n              fullWidth\n              sx={{ mb: 2 }}\n            />\n          )}\n        />\n        {/* Role field */}\n        <TextField\n          type=\"text\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label=\"Role\"\n          {...register(\"role\")}\n          error={touchedFields.role && Boolean(errors.role)}\n          helperText={touchedFields.role ? errors.role?.message : \"\"}\n          fullWidth\n          sx={{ mb: 2 }}\n        />\n        {/* Description field */}\n        <TextField\n          type=\"text\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label=\"Description\"\n          {...register(\"description\")}\n          error={touchedFields.description && Boolean(errors.description)}\n          helperText={touchedFields.description ? errors.description?.message : \"\"}\n          fullWidth\n          sx={{ mb: 2 }}\n        />\n        {/* Extra field */}\n        <TextField\n          type=\"text\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label=\"Extra\"\n          {...register(\"extra\")}\n          error={touchedFields.extra && Boolean(errors.extra)}\n          helperText={touchedFields.extra ? errors.extra?.message : \"\"}\n          fullWidth\n          sx={{ mb: 2 }}\n        />\n        {/* Photo field */}\n        <TextField\n          type=\"file\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label=\"Photo\"\n          {...register(\"photo\")}\n          error={touchedFields.photo && Boolean(errors.photo)}\n          helperText={touchedFields.photo ? errors.photo?.message : \"\"}\n          fullWidth\n          sx={{ mb: 2 }}\n        />\n        {/* Submit button */}\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          Register\n        </Button>\n      </form>\n\n      {/* Sign-in link */}\n\n      {loadingMessage && <LoadingSpinner message={loadingMessage} />}\n    </>\n  );\n}\n","/home/pavanr/Development/tvks/zkid-next-framework/app/theme.ts",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/components/AlertMessageDialog.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/components/Loading.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/components/NavigationBar/navigationBar.tsx",["122","123"],[],"\"use client\";\n\n// Importing components from the Material-UI library\nimport {\n  AppBar, // Represents the top app bar component\n  Toolbar, // Contains the content of the app bar\n  Typography, // Used for displaying text\n  Box, // A container component\n  IconButton, // A button component with an icon\n  Menu, // Represents a dropdown menu\n  MenuItem, // Represents an item within a dropdown menu\n  Button, // A button component\n  Tooltip, // Displays a tooltip when hovering over an element\n  Avatar, // Displays an avatar or profile picture\n  Container, // A container component for layout purposes\n} from \"@mui/material\";\n\nimport { useState, MouseEvent, useEffect } from \"react\"; // Importing React hooks for state management and side effects\n\nimport MenuIcon from \"@mui/icons-material/Menu\"; // Importing a menu icon component from Material-UI\n\nimport Link from \"next/link\"; // Importing the Link component from Next.js for client-side navigation\n\nimport { useTheme as useNextTheme } from \"next-themes\"; // Importing the useTheme hook from next-themes with an alias\n\nimport { useTheme as useMUITheme } from \"@mui/material/styles\"; // Importing the useTheme hook from MUI with an alias\n\nimport { DEFAULT_THEME, getOtherTheme } from \"@/app/theme\"; // Importing custom theme-related functions from the \"@/app/theme\" module\nimport { usePathname } from \"next/navigation\";\nimport Image from \"next/image\";\nimport AppLogoSVG from \"../appLogo\";\n\n// An array of page objects containing page information\nconst pages: {\n  id: number;\n  friendlyName: string;\n  href: string;\n}[] = [\n  { id: 1, friendlyName: \"Home\", href: \"/dashboard\" },\n  // { id: 2, friendlyName: \"Profile\", href: \"/dashboard/profile\" },\n  // { id: 3, friendlyName: \"Help\", href: \"/dashboard/help\" },\n  // { id: 2, friendlyName: \"Users\", href: \"/dashboard/users\" },\n];\n\nexport default function NavigationBar() {\n  const { theme: themeState, setTheme } = useNextTheme(); // Using the useTheme hook to access the current theme and set the theme\n  const [themeName, setThemeName] = useState(DEFAULT_THEME); // State variable to store the name of the current theme\n  const [anchorElNav, setAnchorElNav] = useState<null | HTMLElement>(null); // State variable for the anchor element of the navigation menu\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null); // State variable for the anchor element of the user menu\n  const [selectedList, setSelectedList] = useState<number[]>([]); // State variable for the selected list items\n  const muiTheme = useMUITheme(); // Using the useTheme hook to access the current theme\n  const currentPath = usePathname();\n  // Event handler for opening the navigation menu\n  const handleOpenNavMenu = (event: MouseEvent<HTMLElement>) => {\n    setAnchorElNav(event.currentTarget);\n  };\n\n  // Event handler for opening the user menu\n  const handleOpenUserMenu = (event: MouseEvent<HTMLElement>) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  // Event handler for closing the navigation menu\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  // Event handler for closing the user menu\n  const handleCloseUserMenu = () => {\n    setAnchorElUser(null);\n  };\n\n  // Side effect for updating the theme name when the theme changes\n  useEffect(() => setThemeName(getOtherTheme(themeState)), [themeState]);\n\n  // An array of settings objects containing setting information\n  const settings: {\n    id: number;\n    friendlyName: string;\n    onClick: () => Promise<void>;\n  }[] = [\n    // {\n    //   id: 1,\n    //   friendlyName: `Profile`,\n    //   onClick: async () => {\n    //     router.push(\"/dashboard/profile\");\n    //     handleCloseUserMenu();\n    //   },\n    // },\n    {\n      id: 2,\n      friendlyName: `Activate ${themeName} Theme`,\n      onClick: async () => {\n        setTheme(getOtherTheme(themeState)); // Calling the setTheme function to switch to the other theme (light/dark)\n        handleCloseUserMenu();\n      },\n    },\n    // {\n    //   id: 3,\n    //   friendlyName: \"Logout\",\n    //   onClick: async () => {\n    //     await signOut({ callbackUrl: \"/signin\" }); // Calling the signOut function to sign the user out and redirect to the sign-in page\n    //     handleCloseUserMenu();\n    //   },\n    // },\n  ];\n\n  return (\n    <AppBar position=\"static\" style={{ marginBottom: 20, paddingTop: 5, paddingBottom: 5 }}>\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          {/* Logo */}\n          <Link href=\"/dashboard\">\n            <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" }, height: 54, paddingRight: 2 }}>\n              {/* <AppLogoSVG theme={themeName} /> */}\n              <Image src=\"/logo.png\" alt=\"Logo\" width={150} height={100} />\n            </Box>\n          </Link>\n\n          {/* Navigation Menu (for small screens) */}\n          <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            {/* Logo */}\n\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"left\",\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: \"block\", md: \"none\" },\n              }}\n            >\n              {/* Pages */}\n              {pages.map((page) => (\n                <MenuItem\n                  key={page.id}\n                  component={Link}\n                  href={page.href}\n                  onClick={handleCloseNavMenu}\n                  sx={{\n                    color: currentPath === page.href ? muiTheme.palette.primary.main : \"inherit\", // Use primary color for the current page\n                  }}\n                >\n                  <Typography textAlign=\"center\" sx={{ fontWeight: currentPath === page.href ? \"bold\" : \"normal\" }}>\n                    {page.friendlyName}\n                  </Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n            <Link href=\"/dashboard\" style={{ flexGrow: 1, textAlign: \"center\" }}>\n              <Box\n                sx={{\n                  display: { xs: \"flex\", md: \"none\" },\n                  mr: 1,\n                  height: 54,\n                  justifyContent: \"center\", // Center the content horizontally\n                }}\n              >\n                {/* <AppLogoSVG theme={themeName} /> */}\n                <Image src=\"/logo.png\" alt=\"Logo\" width={150} height={100} />\n              </Box>\n            </Link>\n          </Box>\n          {/* Navigation Buttons (for medium and large screens) */}\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\n            {pages.map((page) => (\n              <Button\n                key={page.id}\n                component={Link}\n                href={page.href}\n                sx={{\n                  my: 2,\n                  fontWeight: currentPath === page.href ? \"bold\" : \"normal\",\n                  backgroundColor:\n                    currentPath === page.href\n                      ? muiTheme.palette.getContrastText(muiTheme.palette.primary.main)\n                      : \"transparent\", // Use primary color as background for the current page\n                  color: currentPath === page.href ? muiTheme.palette.primary.main : muiTheme.palette.common.white, // Use white text color for the current page\n                  \"&:hover\": {\n                    color: muiTheme.palette.primary.main, // Change color on hover\n                    backgroundColor: muiTheme.palette.getContrastText(muiTheme.palette.primary.main), // Change background color on hover\n                  },\n                }}\n              >\n                {page.friendlyName}\n              </Button>\n            ))}\n          </Box>\n\n          {/* User Avatar and Settings */}\n          <Box sx={{ flexGrow: 0 }}>\n            <Tooltip title=\"Open settings\">\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                <Avatar alt=\"AC\" />\n              </IconButton>\n            </Tooltip>\n            <Menu\n              sx={{ mt: \"45px\" }}\n              id=\"menu-appbar\"\n              anchorEl={anchorElUser}\n              anchorOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              open={Boolean(anchorElUser)}\n              onClose={handleCloseUserMenu}\n            >\n              {/* User Settings */}\n              {settings.map((setting) => (\n                <MenuItem key={setting.id} onClick={setting.onClick}>\n                  <Typography textAlign=\"center\">{setting.friendlyName}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n}\n","/home/pavanr/Development/tvks/zkid-next-framework/components/UserDigitalCard.tsx",["124","125","126","127","128","129"],[],"import { Card, CardContent, CardMedia, Grid, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport { useRouter } from \"next/navigation\";\nimport { Suspense, useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\nimport Image from \"next/image\";\nimport moment from \"moment\";\nimport { UserInterface } from \"@/lib/models/user.model\";\n\nexport function DisplayUserCard({ userInfo }: { userInfo: UserInterface }) {\n  const [expanded, setExpanded] = useState(false);\n\n  const toggleExpanded = () => {\n    setExpanded(!expanded);\n  };\n  // Dynamically calculate the screen height\n  const screenHeight = window.innerHeight;\n  let defaultImageHeight = 0.35;\n  // Calculate the image height based on screen height\n  if (screenHeight < 600) {\n    defaultImageHeight = 0.25;\n  }\n  const imageHeight = screenHeight * defaultImageHeight;\n  return (\n    <Box sx={{ ...styles.cardContainer, height: screenHeight - 120 }}>\n      <Card sx={{ ...styles.card }} variant=\"outlined\">\n        <CardContent sx={{ overflowY: \"auto\" }}>\n          <CardMedia component=\"img\" src={`${userInfo.photo}`} sx={{ height: imageHeight }} title=\"green iguana\" />\n\n          <Typography variant=\"h4\" sx={{ textTransform: \"capitalize\" }} color=\"yellow\">\n            {userInfo.name}\n          </Typography>\n          <Typography variant=\"h5\" style={styles.spacingBetween} color=\"red\">\n            {userInfo.role}\n          </Typography>\n          <Typography variant=\"body1\" style={styles.spacingBetween}>\n            {userInfo.phone}\n          </Typography>\n          <Typography variant=\"body1\" style={styles.spacingBetween}>\n            {userInfo.email}\n          </Typography>\n          <div style={{ marginTop: \"10px\" }}>\n            <Typography variant=\"body1\" component=\"div\" style={{ textAlign: \"justify\" }}>\n              {userInfo.description}\n            </Typography>\n          </div>\n          <Typography variant=\"body1\" component=\"div\" style={{ textAlign: \"justify\" }}>\n            {userInfo.extra}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n}\n\nconst styles = {\n  centeredContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  cardContainer: {\n    // perspective: \"1000px\",\n    width: \"100%\",\n    height: \"100%\",\n    // minHeight: '300px',\n    margin: \"0 auto\",\n  },\n  card: {\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    transformStyle: \"preserve-3d\",\n    transition: \"transform 0.5s\",\n  },\n  buttonsContainer: {\n    marginTop: \"16px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    \"& > button\": {\n      marginRight: \"6px\", // Adjust the margin to your preference\n    },\n  },\n  spacingBetween: {\n    paddingTop: \"5px\",\n  },\n};\n","/home/pavanr/Development/tvks/zkid-next-framework/components/appLogo.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/components/pageTitle.tsx",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/lib/models/user.model.ts",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/lib/mongodb.ts",[],[],"/home/pavanr/Development/tvks/zkid-next-framework/lib/utils.ts",[],[],{"ruleId":"130","severity":1,"message":"131","line":25,"column":27,"nodeType":"132","messageId":"133","endLine":25,"endColumn":43},{"ruleId":"130","severity":1,"message":"134","line":25,"column":45,"nodeType":"132","messageId":"133","endLine":25,"endColumn":57},{"ruleId":"130","severity":1,"message":"134","line":43,"column":46,"nodeType":"132","messageId":"133","endLine":43,"endColumn":58},{"ruleId":"135","severity":1,"message":"136","line":49,"column":11,"nodeType":"132","messageId":"137","endLine":49,"endColumn":31},{"ruleId":"138","severity":1,"message":"139","line":72,"column":7,"nodeType":"140","messageId":"141","endLine":72,"endColumn":46},{"ruleId":"138","severity":1,"message":"139","line":74,"column":7,"nodeType":"140","messageId":"141","endLine":74,"endColumn":44},{"ruleId":"130","severity":1,"message":"142","line":50,"column":10,"nodeType":"132","messageId":"133","endLine":50,"endColumn":22},{"ruleId":"130","severity":1,"message":"143","line":50,"column":24,"nodeType":"132","messageId":"133","endLine":50,"endColumn":39},{"ruleId":"130","severity":1,"message":"144","line":14,"column":9,"nodeType":"132","messageId":"133","endLine":14,"endColumn":23},{"ruleId":"135","severity":1,"message":"145","line":26,"column":19,"nodeType":"132","messageId":"137","endLine":26,"endColumn":25},{"ruleId":"135","severity":1,"message":"145","line":27,"column":22,"nodeType":"132","messageId":"137","endLine":27,"endColumn":28},{"ruleId":"135","severity":1,"message":"145","line":34,"column":43,"nodeType":"132","messageId":"137","endLine":34,"endColumn":49},{"ruleId":"135","severity":1,"message":"145","line":37,"column":46,"nodeType":"132","messageId":"137","endLine":37,"endColumn":52},{"ruleId":"135","severity":1,"message":"145","line":40,"column":46,"nodeType":"132","messageId":"137","endLine":40,"endColumn":52},"unused-imports/no-unused-vars","'req' is defined but never used. Allowed unused args must match /^_/u.","Identifier","unusedVar","'context' is defined but never used. Allowed unused args must match /^_/u.","no-use-before-define","'sendRegistrationData' was used before it was defined.","usedBeforeDefined","no-alert","Unexpected alert.","CallExpression","unexpected","'selectedList' is assigned a value but never used. Allowed unused vars must match /^_/u.","'setSelectedList' is assigned a value but never used. Allowed unused vars must match /^_/u.","'toggleExpanded' is assigned a value but never used. Allowed unused vars must match /^_/u.","'styles' was used before it was defined."]